import React, {Component} from "react";
import axios from "axios";
import {Button, ButtonGroup, Col, Form, Modal, Row, Table} from "react-bootstrap";
import {faEdit, faTrashAlt} from "@fortawesome/free-solid-svg-icons";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import jsPDF from "jspdf";
import "jspdf-autotable";
import "../../Stylesheets/Admin-Tables-styles.css";
import EditNotice from "./EditNotice";
import AuthenticationService from "../Login/AuthenticationService";
import Swal from "sweetalert2";

class NoticeList extends Component {

    constructor(props) {
        super(props);

        this.state = {
            notices: [],
            grades: [],
            filterGrade: '',
            show: false,
            username: AuthenticationService.loggedUserName()
        }
    }

    componentDidMount() {
        this.refreshTable();
        this.getSubjectList();
    }

    getSubjectList = () =>{
        axios.get("http://localhost:8080/Subject/").then(
            response =>{
                this.setState({
                    grades: response.data
                })
            }
        )
    }

    filterChangeHandler = (e) =>{
        this.setState({filterGrade: e.target.value});

        axios.get(`http://localhost:8080/Notice/grade/${e.target.value}`)
            .then(response => {
                console.log(response.data)
                this.setState({notices: response.data})
            })
            .catch((error) => {
                console.log(error);
            })
    }

    refreshTable = () => {
        axios.get('http://localhost:8080/Notice/')
            .then(response => {
                console.log(response.data)
                this.setState({notices: response.data})
            })
            .catch((error) => {
                console.log(error);
            })
    }

    deleteItem(id) {
        Swal.fire({
            icon: 'warning',
            title: 'Are you sure?',
            text: "Once deleted, you will not be able to recover this record!",
            background: '#fff',
            confirmButtonColor: '#454545',
            iconColor: '#ffc200',
            showCancelButton: true,
            cancelButtonColor: '#d33',
            confirmButtonText: 'Delete'
        }).then( willDelete => {
            if (willDelete.isConfirmed) {
                axios.delete(`http://localhost:8080/Notice/delete/${id}`).then(response => {
                    console.log(response.data)
                    this.refreshTable();

                    Swal.fire({
                        icon: 'success',
                        title: 'Successful',
                        text: "Notice has been deleted!!",
                        background: '#fff',
                        confirmButtonColor: '#333533',
                        iconColor: '#60e004'
                    })
                })
            }
        })
    }

    ExportPdfReport = () => {



        const doc = new jsPDF();

        /*---------------------------------------------- page sizes ---------------------------------------------------*/
        const pageSize = doc.internal.pageSize;
        const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();
        const pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();
        /*-------------------------------------------------------------------------------------------------------------*/



        /*----------------------------------------------- page title --------------------------------------------------*/
        doc.setFontSize(20);                                                    // fontSize should come before the text
        doc.setTextColor(36,36,35)
        doc.text("Notice Detail Report", 14, 22)
        /*-------------------------------------------------------------------------------------------------------------*/


        /*------------------------------------- generate date and time ------------------------------------------------*/
        const today = new Date();
        const timestamp = today.getFullYear() + "-" + today.getMonth() + "-" + today.getDay() + ":" + today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

        let timestampText = doc.splitTextToSize("Generated at: " + timestamp,  pageWidth, {})
        doc.setFontSize(11)
        doc.setTextColor(100)
        doc.text(timestampText, 14, 30)
        /*-------------------------------------------------------------------------------------------------------------*/


        /*------------------------------------- generate logged username ----------------------------------------------*/
        let printUserName = doc.splitTextToSize("Generated by: " + this.state.username,  pageWidth, {})
        doc.setFontSize(11)
        doc.setTextColor(100)
        doc.text(printUserName, 14, 36)
        /*-------------------------------------------------------------------------------------------------------------*/

        // headers array
        const headers = [["Notice Id", "Subject", "Grade", "Notice Topic", "Notice Body", "Modified Date", "Modified Time"]];


        // body array
        const notices = this.state.notices.map(
            ntc => [
                ntc.noticeId,
                ntc.noticeSubject,
                ntc.noticeGrade,
                ntc.noticeTopic,
                ntc.noticeBody,
                ntc.enteredDate,
                ntc.enteredTime
            ]
        );


        let content = {
            head: headers,
            body: notices,
            styles: {
                lineColor: [245, 203, 91],    // column border color
                lineWidth: 0.3,             // column border width
            },
            headStyles: {
                fillColor: [245, 203, 91],  //header background color
                textColor: [36,36,35]       //header text color
            },
            didDrawPage: () => {
                doc.setFontSize(20);        // fontSize should come before the text
                doc.setTextColor(36,36,35)
                doc.text("Notice Detail Report", 14, 22)

                // Footer
                let str = 'Page ' + doc.internal.getNumberOfPages();

                // jsPDF 1.4+ uses getWidth, <1.4 uses .width
                doc.setFontSize(10)
                doc.text(str, 14, pageHeight - 10)
                doc.text("ELMS", pageWidth - 25, pageHeight - 10)
            },
            startY: 40,
            margin: { top: 30 }
        };

        doc.autoTable(content);

        doc.save("Notice_Report_" + Date.now() + ".pdf");


    }

    handleShow = () => {
        this.setState({show: true})
    }

    handleClose = () => {
        this.setState({show: false})
        this.refreshTable();
    }

    editNotice = (noticeId) => {
        //console.log(indexno)
        this.setState({noticeId: noticeId})
        this.handleShow()

    }


    render() {
        const {notices} = this.state;

        return (
            <div>

                <p>NOTICE MANAGEMENT</p>
                <div className={"table-wrapper"}>

                    <div>
                        <h3>Notices</h3>
                    </div>
                    <div className={"mb-2"}>
                        <Row>
                            <Col>
                                <Form.Group as={Col} controlId={"formNoticeGrade"}>
                                    <Form.Select onChange={this.filterChangeHandler} style={{height:'48px'}}>
                                        {
                                            this.state.grades.map(item =>
                                                <option value={item.grade} key={item.grade}>{item.grade}</option>
                                            )
                                        }
                                    </Form.Select>
                                </Form.Group>
                            </Col>
                            <Col>
                                <button className={"print-pdf-btn"}
                                        onClick={this.refreshTable}>
                                    Clear Filter
                                </button>
                            </Col>
                            <Col className={"text-end"}>
                                <button className={"print-pdf-btn"}
                                        onClick={this.ExportPdfReport}>
                                    Download Report
                                </button>
                            </Col>
                        </Row>
                    </div>
                    <Table bordered responsive>
                        <thead className={"table-custom-header"}>
                        <tr>
                            <th>Notice ID</th>
                            <th>Subject</th>
                            <th>Grade</th>
                            <th>Topic</th>
                            <th>Body</th>
                            <th>Modified Date</th>
                            <th>Modified Time</th>
                            <th className={"text-center"}>Action</th>
                        </tr>
                        </thead>
                        <tbody>

                        {
                            notices.length === 0 ?
                                <tr align="center">
                                    <td colSpan="6"><h6 className={"mt-3"}>No records at the moment</h6>
                                    </td>
                                </tr>

                                : [
                                    notices.map(notice => {
                                        return (
                                            <tr key={notice.username}>
                                                <td>{notice.noticeId}</td>
                                                <td>{notice.noticeSubject}</td>
                                                <td>{notice.noticeGrade}</td>
                                                <td>{notice.noticeTopic}</td>
                                                <td width={"500px"}>{notice.noticeBody}</td>
                                                <td>{notice.enteredDate}</td>
                                                <td>{notice.enteredTime}</td>
                                                <td className={"text-center"}>
                                                    <ButtonGroup>
                                                        <Button variant={"warning"} type={"submit"}
                                                                onClick={this.editNotice.bind(this, notice.noticeId)}>
                                                            <FontAwesomeIcon icon={faEdit}/>
                                                        </Button>
                                                        <Button variant={"danger"} type={"submit"}
                                                                onClick={this.deleteItem.bind(this, notice.noticeId)}>
                                                            <FontAwesomeIcon icon={faTrashAlt}/>
                                                        </Button>
                                                    </ButtonGroup>

                                                </td>
                                            </tr>
                                        )
                                    })
                                ]
                        }
                        </tbody>
                    </Table>
                    {/*--------------------------Modal Box to Edit Template--------------------------*/}

                    <Modal show={this.state.show} onHide={this.handleClose} centered>
                        <Modal.Header closeButton>
                            <Modal.Title>Update</Modal.Title>
                        </Modal.Header>
                        <Modal.Body> <EditNotice noticeId={this.state.noticeId} close={this.handleClose}/> </Modal.Body>
                    </Modal>

                    {/*--------------------------------------------------------------------------------*/}
                </div>
            </div>
        )
    }
}

export default NoticeList;
